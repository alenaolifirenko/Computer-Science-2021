1. Когда используются контейнеры типа (мульти) множество и отображение?

Контейнер map в языке C++ позволяет работать сразу с 2 значениями. Каждый из элементов пары может иметь свой тип. 
Одним из основных способов использования map является создание ассоциативного массива. 
Это означает, что один из элементов пары становится ключом, по которому можно извлечь второй элемент, хранящий какую-либо информацию.

Set используется для хранения и извлечения данных из коллекции. 
Значения элементов в set являются уникальными и служат в качестве ключевых значений, в соответствии с которыми данные автоматически упорядочиваются. 
Значение элемента в set не может быть изменено напрямую.

Контейнеры map и set не допускают повторяющихся значений ключей, 
а multimap (мультиотображение) и multiset (мультимножество) позволяют сохранять ключи с дублирующимися значениями. 


2. Каким требования должна удовлетворять качественная хеш-функция?

Быстрое вычисление hash-кода, детерменированность, равномерность, сводит к минимуму число коллизий.

3. Из-за чего в хэш-таблицах возникают коллизии и как можно их разрешить?

Ситуация, когда для различных ключей получается одно и то же хеш-значение, называется коллизией. 
Существует несколько решений данной проблемы, например, метод цепочек и метод двойного хеширования.
Метод цепочек: Каждая ячейка массива H является указателем на связный список (цепочку) пар ключ-значение, соответствующих одному и тому же хеш-значению ключа.

4. Почему сложность основных операций хэш-таблиц в худшем случае О(N)?

При некоторых разумных допущениях, все три операции (поиск, вставка, удаление элементов) в среднем выполняются за время O(1). 
Но при этом не гарантируется, что время выполнения отдельной операции мало.
Это связано с тем, что при достижении некоторого значения коэффициента заполнения необходимо осуществлять перестройку индекса хеш-таблицы:
увеличить значение размера массива и заново добавить в пустую хеш-таблицу все пары.

5. Что позволяет сделать инструмент создания контейнеров Boost.Multiindex?

Позвляет создать контейнеры с множественными индексами.
Хранение и доступ к объектам по более чем 1 ключу или их комбинации.
Огромное преимущество — скорость, Boost.Multiindex очень быстрый. 